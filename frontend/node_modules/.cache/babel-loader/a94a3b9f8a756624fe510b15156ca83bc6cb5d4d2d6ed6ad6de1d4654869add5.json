{"ast":null,"code":"import Cookies from 'js-cookie';\nexport async function csrfFetch(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there is no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n  // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the\n  // \"XSRF-TOKEN\" cookie\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  }\n  // call the default window's fetch with the url and the options passed in\n  const res = await window.fetch(url, options);\n\n  // if the response status code is 400 or above, then throw an error with the\n  // error being the response\n  if (res.status >= 400) throw res;\n\n  // if the response status code is under 400, then return the response to the\n  // next promise chain\n  return res;\n}\n\n// call this to get the \"XSRF-TOKEN\" cookie, should only be used in development\nexport function restoreCSRF() {\n  return csrfFetch('/api/csrf/restore');\n}","map":{"version":3,"names":["Cookies","csrfFetch","url","options","arguments","length","undefined","method","headers","toUpperCase","get","res","window","fetch","status","restoreCSRF"],"sources":["/home/jtheisen/projects/Reebelo-Case-Study/frontend/src/store/csrf.js"],"sourcesContent":["import Cookies from 'js-cookie';\n\nexport async function csrfFetch(url, options = {}) {\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there is no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n    // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the\n    // \"XSRF-TOKEN\" cookie\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] =\n      options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  }\n  // call the default window's fetch with the url and the options passed in\n  const res = await window.fetch(url, options);\n\n  // if the response status code is 400 or above, then throw an error with the\n    // error being the response\n  if (res.status >= 400) throw res;\n\n  // if the response status code is under 400, then return the response to the\n    // next promise chain\n  return res;\n}\n\n// call this to get the \"XSRF-TOKEN\" cookie, should only be used in development\nexport function restoreCSRF() {\n  return csrfFetch('/api/csrf/restore');\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAE/B,OAAO,eAAeC,SAASA,CAACC,GAAG,EAAgB;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC/C;EACAD,OAAO,CAACI,MAAM,GAAGJ,OAAO,CAACI,MAAM,IAAI,KAAK;EACxC;EACAJ,OAAO,CAACK,OAAO,GAAGL,OAAO,CAACK,OAAO,IAAI,CAAC,CAAC;;EAEvC;EACE;EACA;EACF,IAAIL,OAAO,CAACI,MAAM,CAACE,WAAW,CAAC,CAAC,KAAK,KAAK,EAAE;IAC1CN,OAAO,CAACK,OAAO,CAAC,cAAc,CAAC,GAC7BL,OAAO,CAACK,OAAO,CAAC,cAAc,CAAC,IAAI,kBAAkB;IACvDL,OAAO,CAACK,OAAO,CAAC,YAAY,CAAC,GAAGR,OAAO,CAACU,GAAG,CAAC,YAAY,CAAC;EAC3D;EACA;EACA,MAAMC,GAAG,GAAG,MAAMC,MAAM,CAACC,KAAK,CAACX,GAAG,EAAEC,OAAO,CAAC;;EAE5C;EACE;EACF,IAAIQ,GAAG,CAACG,MAAM,IAAI,GAAG,EAAE,MAAMH,GAAG;;EAEhC;EACE;EACF,OAAOA,GAAG;AACZ;;AAEA;AACA,OAAO,SAASI,WAAWA,CAAA,EAAG;EAC5B,OAAOd,SAAS,CAAC,mBAAmB,CAAC;AACvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}